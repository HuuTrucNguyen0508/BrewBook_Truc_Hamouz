version: '3.8'

services:
  # BrewBook Next.js Application
  brewbook:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      
      # Database Configuration (if using local Postgres)
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-brewbook}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Vector Database (pgvector)
      - VECTOR_DIMENSION=1536
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Web Scraping
      - SCRAPER_USER_AGENT=${SCRAPER_USER_AGENT:-Mozilla/5.0 (compatible; BrewBook/1.0)}
      - SCRAPER_TIMEOUT=${SCRAPER_TIMEOUT:-30000}
      - SCRAPER_RATE_LIMIT=${SCRAPER_RATE_LIMIT:-1000}
      
      # AI Generation
      - AI_MODEL_NAME=${AI_MODEL_NAME:-gpt-4o}
      - AI_EMBEDDING_MODEL=${AI_EMBEDDING_MODEL:-text-embedding-3-large}
      - AI_IMAGE_MODEL=${AI_IMAGE_MODEL:-dall-e-3}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS:-4000}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.7}
      
      # RAG Configuration
      - RAG_TOP_K_RESULTS=${RAG_TOP_K_RESULTS:-5}
      - RAG_MAX_GENERATED_RECIPES=${RAG_MAX_GENERATED_RECIPES:-3}
      
      # File Storage
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-10485760}
      - STORAGE_BUCKET=${STORAGE_BUCKET:-brewbook-assets}
      
      # Monitoring
      - ENABLE_LOGGING=${ENABLE_LOGGING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    volumes:
      - ./app:/app/app
      - ./components:/app/components
      - ./lib:/app/lib
      - ./public:/app/public
      - ./styles:/app/styles
      - ./next.config.ts:/app/next.config.ts
      - ./tailwind.config.ts:/app/tailwind.config.ts
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./.env:/app/.env
      - brewbook-data:/app/data
      - /app/node_modules
      - /app/.next
      
    working_dir: /app
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - brewbook-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-brewbook}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
      - ./supabase/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - brewbook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-brewbook}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - brewbook-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - brewbook
    restart: unless-stopped
    networks:
      - brewbook-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  brewbook-network:
    driver: bridge

volumes:
  brewbook-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
